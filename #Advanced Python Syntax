#Advanced Python Syntax



#1Create a list, to_21, that's just the numbers from 1 to 21, inclusive.

#Create a second list, odds, that contains only the odd numbers in the to_21 list (1, 3, 5, and so on). Use list slicing for this one instead of a list comprehension.

#Finally, create a third list, middle_third, that's equal to the middle third of to_21, from 8 to 14, inclusive. 


to_21 = [i for i in range(1,22)]
odds = to_21[::2]
middle_third = to_21[7:14]





Anonymous Functions
One of the more powerful aspects of Python is that it allows for a style of programming called functional programming, which means that you're allowed to pass functions around just as if they were variables or values. Sometimes we take this for granted, but not all languages allow this!

Check out the code at the right. See the lambda bit? Typing

lambda x: x % 3 == 0
Is the same as

def by_three(x):
  return x % 3 == 0
Only we don't need to actually give the function a name; it does its work and returns a value without one. That's why the function the lambda creates is an anonymous function.

When we pass the lambda to filter, filter uses the lambda to determine what to filter, and the second argument (my_list, which is just the numbers 0 – 15) is the list it does the filtering on.




Fill in the first part of the filter function with a lambda. The lambda should ensure that only "Python" is returned by the filter.

Fill in the second part of the filter function with languages, the list to filter.




languages = ["HTML", "JavaScript", "Python", "Ruby"]

# Add arguments to the filter()
print filter(lambda x: x=="Python",languages)







All right! Time to test out filter() and lambda expressions.

cubes = [x ** 3 for x in range(1, 11)]
filter(lambda x: x % 3 == 0, cubes)
The example above is just a reminder of the syntax.





Create a list, squares, that consists of the squares of the numbers 1 to 10. A list comprehension could be useful here!

Use filter() and a lambda expression to print out only the squares that are between 30 and 70 (inclusive).



squares = [ i*i for i in range(1,11)]

print filter(lambda x: x <= 70 and x>=30 , squares )




Call the appropriate method on movies such that it will print out all the items (hint, hint) in the dictionary—that is, each key and each value.



movies = {
  "Monty Python and the Holy Grail": "Great",
  "Monty Python's Life of Brian": "Good",
  "Monty Python's Meaning of Life": "Okay"
}

print movies.items()





.
Use a list comprehension to create a list, threes_and_fives, that consists only of the numbers between 1 and 15 (inclusive) that are evenly divisible by 3 or 5.



threes_and_fives = [x for x in range(1,16) if x%3==0 or x%5 ==0]
print threes_and_fives




Last but not least, let's look over some lambdas.

my_list = range(16)
filter(lambda x: x % 3 == 0, my_list)
We've given you another (slightly different) garbled. Sort it out with a filter() and a lambda.



Create a new variable called message.

Set it to the result of calling filter() with the appropriate lambda that will filter out the "X"s. The second argument will be garbled.

Finally, print your message to the console.


garbled = "IXXX aXXmX aXXXnXoXXXXXtXhXeXXXXrX sXXXXeXcXXXrXeXt mXXeXsXXXsXaXXXXXXgXeX!XX"
message = filter (lambda x: x != "X" , garbled)
print message



